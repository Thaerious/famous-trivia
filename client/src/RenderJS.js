import browserify from "browserify";
import FS from "fs";
import Path from "path";

class RenderJS{

    /**
     * dependencies : an array of nidget records created by NidgetPreprocessor
     */
    constructor(dependencies){
        this.sourcePaths = [];
        this.dependencies = dependencies;
    }

    addPath(...jsSrcPath){
        this.sourcePaths = [...this.sourcePaths, ...jsSrcPath];
    }

    render(){
        const b = browserify({ debug: true });
    
        for (let path of this.sourcePaths) {
            if (FS.existsSync(path)) b.add(path);
        }

        for (let dep of this.dependencies) {
            b.add(dep.script);
        }

        b.transform("babelify");
        const rs = b.bundle();
        return rs;        
    }

    async renderSync(outpath){
        return new Promise((resolve, reject) => {
            const rs = this.render();
            const stream = FS.createWriteStream(outpath);
            stream.write("// generated by EJSRender on " + new Date().toLocaleString() + "\n");

            rs.on('error', err => {
                reject(err);
                if (stream?.emit) stream.emit('end'); 
            });
            
            rs.pipe(stream);
            
            // wait for the write-stream to finish writing
            stream.on('finish', ()=>{
                stream.close();
                resolve();
            });            
        });
    }
}

export default RenderJS;
